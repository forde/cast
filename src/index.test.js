import { cast } from '.'

it('casts various types to string', () => {
    expect( cast.str(11)                    ).toBe('')
    expect( cast.str('11')                  ).toBe('11')
    expect( cast.str(false)                 ).toBe('')
    expect( cast.str(0)                     ).toBe('')
    expect( cast.str(true)                  ).toBe('')
    expect( cast.str(null)                  ).toBe('')
    expect( cast.str([0,'kek'])             ).toBe('')
    expect( cast.str({a: 'b'})              ).toBe('')
    expect( cast.str({})                    ).toBe('')
    expect( cast.str(undefined)             ).toBe('')
    expect( cast.str(NaN)                   ).toBe('')
    expect( cast.str(123.45)                ).toBe('')
    expect( cast.str(new Promise(() => {})) ).toBe('')
    expect( cast.str(new Date())            ).toBe('')
    expect( cast.str(() => {})              ).toBe('')
})

it('casts various types to string with default values', () => {
    expect( cast.str(11, 'lol')                    ).toBe('lol')
    expect( cast.str('11', 'lol')                  ).toBe('11')
    expect( cast.str(false, 'lol')                 ).toBe('lol')
    expect( cast.str(0, 'lol')                     ).toBe('lol')
    expect( cast.str(true, 'lol')                  ).toBe('lol')
    expect( cast.str(null, 'lol')                  ).toBe('lol')
    expect( cast.str([0,'kek'], 'lol')             ).toBe('lol')
    expect( cast.str({a: 'b'}, 'lol')              ).toBe('lol')
    expect( cast.str({}, 'lol')                    ).toBe('lol')
    expect( cast.str(undefined, 'lol')             ).toBe('lol')
    expect( cast.str(NaN, 'lol')                   ).toBe('lol')
    expect( cast.str(123.45, 'lol')                ).toBe('lol')
    expect( cast.str(new Promise(() => {}), 'lol') ).toBe('lol')
    expect( cast.str(new Date(), 'lol')            ).toBe('lol')
    expect( cast.str(() => {}, 'lol')              ).toBe('lol')
})

it('casts various types to array', () => {
    expect( cast.arr(11)                    ).toEqual([])
    expect( cast.arr('11')                  ).toEqual([])
    expect( cast.arr(false)                 ).toEqual([])
    expect( cast.arr(0)                     ).toEqual([])
    expect( cast.arr(true)                  ).toEqual([])
    expect( cast.arr(null)                  ).toEqual([])
    expect( cast.arr([0,'kek'])             ).toEqual([0,'kek'])
    expect( cast.arr({a: 'b'})              ).toEqual([])
    expect( cast.arr({})                    ).toEqual([])
    expect( cast.arr(undefined)             ).toEqual([])
    expect( cast.arr(NaN)                   ).toEqual([])
    expect( cast.arr(123.45)                ).toEqual([])
    expect( cast.arr(new Promise(() => {})) ).toEqual([])
    expect( cast.arr(new Date())            ).toEqual([])
    expect( cast.arr(() => {})              ).toEqual([])
})

it('casts various types to array with default values', () => {
    expect( cast.arr(11, [1])                    ).toEqual([1])
    expect( cast.arr('11', [1])                  ).toEqual([1])
    expect( cast.arr(false, [1])                 ).toEqual([1])
    expect( cast.arr(0, [1])                     ).toEqual([1])
    expect( cast.arr(true, [1])                  ).toEqual([1])
    expect( cast.arr(null, [1])                  ).toEqual([1])
    expect( cast.arr([0,'kek'], [1])             ).toEqual([0,'kek'])
    expect( cast.arr({a: 'b'}, [1])              ).toEqual([1])
    expect( cast.arr({}, [1])                    ).toEqual([1])
    expect( cast.arr(undefined, [1])             ).toEqual([1])
    expect( cast.arr(NaN, [1])                   ).toEqual([1])
    expect( cast.arr(123.45, [1])                ).toEqual([1])
    expect( cast.arr(new Promise(() => {}), [1]) ).toEqual([1])
    expect( cast.arr(new Date(), [1])            ).toEqual([1])
    expect( cast.arr(() => {}, [1])              ).toEqual([1])
})

it('casts various types to object', () => {
    expect( cast.obj(11)                    ).toEqual({})
    expect( cast.obj('11')                  ).toEqual({})
    expect( cast.obj(false)                 ).toEqual({})
    expect( cast.obj(0)                     ).toEqual({})
    expect( cast.obj(true)                  ).toEqual({})
    expect( cast.obj(null)                  ).toEqual({})
    expect( cast.obj([0,'kek'])             ).toEqual({})
    expect( cast.obj({a: 'b'})              ).toEqual({a: 'b'})
    expect( cast.obj({})                    ).toEqual({})
    expect( cast.obj(undefined)             ).toEqual({})
    expect( cast.obj(NaN)                   ).toEqual({})
    expect( cast.obj(123.45)                ).toEqual({})
    expect( cast.obj(new Promise(() => {})) ).toEqual({})
    expect( cast.obj(new Date())            ).toEqual({})
    expect( cast.obj(() => {})              ).toEqual({})
})

it('casts various types to object with default values', () => {
    expect( cast.obj(11, {one: 'two'})                    ).toEqual({one: 'two'})
    expect( cast.obj('11', {one: 'two'})                  ).toEqual({one: 'two'})
    expect( cast.obj(false, {one: 'two'})                 ).toEqual({one: 'two'})
    expect( cast.obj(0, {one: 'two'})                     ).toEqual({one: 'two'})
    expect( cast.obj(true, {one: 'two'})                  ).toEqual({one: 'two'})
    expect( cast.obj(null, {one: 'two'})                  ).toEqual({one: 'two'})
    expect( cast.obj([0,'kek'], {one: 'two'})             ).toEqual({one: 'two'})
    expect( cast.obj({a: 'b'}, {one: 'two'})              ).toEqual({a: 'b'})
    expect( cast.obj({}, {one: 'two'})                    ).toEqual({})
    expect( cast.obj(undefined, {one: 'two'})             ).toEqual({one: 'two'})
    expect( cast.obj(NaN, {one: 'two'})                   ).toEqual({one: 'two'})
    expect( cast.obj(123.45, {one: 'two'})                ).toEqual({one: 'two'})
    expect( cast.obj(new Promise(() => {}), {one: 'two'}) ).toEqual({one: 'two'})
    expect( cast.obj(new Date(), {one: 'two'})            ).toEqual({one: 'two'})
    expect( cast.obj(() => {}, {one: 'two'})              ).toEqual({one: 'two'})
})

it('casts various types to integer', () => {
    expect( cast.int(11)                    ).toBe(11)
    expect( cast.int('11')                  ).toBe(0)
    expect( cast.int(false)                 ).toBe(0)
    expect( cast.int(0)                     ).toBe(0)
    expect( cast.int(true)                  ).toBe(0)
    expect( cast.int(null)                  ).toBe(0)
    expect( cast.int([0,'kek'])             ).toBe(0)
    expect( cast.int({a: 'b'})              ).toBe(0)
    expect( cast.int({})                    ).toBe(0)
    expect( cast.int(undefined)             ).toBe(0)
    expect( cast.int(NaN)                   ).toBe(0)
    expect( cast.int(123.45)                ).toBe(0)
    expect( cast.int(new Promise(() => {})) ).toBe(0)
    expect( cast.int(new Date())            ).toBe(0)
    expect( cast.int(() => {})              ).toBe(0)
})

it('casts various types to integer with default values', () => {
    expect( cast.int(11, 100)                    ).toBe(11)
    expect( cast.int('11', 100)                  ).toBe(100)
    expect( cast.int(false, 100)                 ).toBe(100)
    expect( cast.int(0, 100)                     ).toBe(0)
    expect( cast.int(true, 100)                  ).toBe(100)
    expect( cast.int(null, 100)                  ).toBe(100)
    expect( cast.int([0,'kek'], 100)             ).toBe(100)
    expect( cast.int({a: 'b'}, 100)              ).toBe(100)
    expect( cast.int({}, 100)                    ).toBe(100)
    expect( cast.int(undefined, 100)             ).toBe(100)
    expect( cast.int(NaN, 100)                   ).toBe(100)
    expect( cast.int(123.45, 100)                ).toBe(100)
    expect( cast.int(new Promise(() => {}), 100) ).toBe(100)
    expect( cast.int(new Date(), 100)            ).toBe(100)
    expect( cast.int(() => {}, 100)              ).toBe(100)
})

it('casts various types to float', () => {
    expect( cast.flo(11)                    ).toBe(0)
    expect( cast.flo('11')                  ).toBe(0)
    expect( cast.flo(false)                 ).toBe(0)
    expect( cast.flo(0)                     ).toBe(0)
    expect( cast.flo(true)                  ).toBe(0)
    expect( cast.flo(null)                  ).toBe(0)
    expect( cast.flo([0,'kek'])             ).toBe(0)
    expect( cast.flo({a: 'b'})              ).toBe(0)
    expect( cast.flo({})                    ).toBe(0)
    expect( cast.flo(undefined)             ).toBe(0)
    expect( cast.flo(NaN)                   ).toBe(0)
    expect( cast.flo(123.45)                ).toBe(123.45)
    expect( cast.flo(new Promise(() => {})) ).toBe(0)
    expect( cast.flo(new Date())            ).toBe(0)
    expect( cast.flo(() => {})              ).toBe(0)
})

it('casts various types to float with default values', () => {
    expect( cast.flo(11, 3.14)                    ).toBe(3.14)
    expect( cast.flo('11', 3.14)                  ).toBe(3.14)
    expect( cast.flo(false, 3.14)                 ).toBe(3.14)
    expect( cast.flo(0, 3.14)                     ).toBe(3.14)
    expect( cast.flo(true, 3.14)                  ).toBe(3.14)
    expect( cast.flo(null, 3.14)                  ).toBe(3.14)
    expect( cast.flo([0,'kek'], 3.14)             ).toBe(3.14)
    expect( cast.flo({a: 'b'}, 3.14)              ).toBe(3.14)
    expect( cast.flo({}, 3.14)                    ).toBe(3.14)
    expect( cast.flo(undefined, 3.14)             ).toBe(3.14)
    expect( cast.flo(NaN, 3.14)                   ).toBe(3.14)
    expect( cast.flo(123.45, 3.14)                ).toBe(123.45)
    expect( cast.flo(new Promise(() => {}), 3.14) ).toBe(3.14)
    expect( cast.flo(new Date(), 3.14)            ).toBe(3.14)
    expect( cast.flo(() => {}, 3.14)              ).toBe(3.14)
})

it('casts various types to bolean', () => {
    expect( cast.bool(11)                    ).toBe(false)
    expect( cast.bool('11')                  ).toBe(false)
    expect( cast.bool(false)                 ).toBe(false)
    expect( cast.bool(0)                     ).toBe(false)
    expect( cast.bool(true)                  ).toBe(true)
    expect( cast.bool(null)                  ).toBe(false)
    expect( cast.bool([0,'kek'])             ).toBe(false)
    expect( cast.bool({a: 'b'})              ).toBe(false)
    expect( cast.bool({})                    ).toBe(false)
    expect( cast.bool(undefined)             ).toBe(false)
    expect( cast.bool(NaN)                   ).toBe(false)
    expect( cast.bool(123.45)                ).toBe(false)
    expect( cast.bool(new Promise(() => {})) ).toBe(false)
    expect( cast.bool(new Date())            ).toBe(false)
    expect( cast.bool(() => {})              ).toBe(false)
})

it('casts various types to bolean with default values', () => {
    expect( cast.bool(11, true)                    ).toBe(true)
    expect( cast.bool('11', true)                  ).toBe(true)
    expect( cast.bool(false, true)                 ).toBe(false)
    expect( cast.bool(0, true)                     ).toBe(true)
    expect( cast.bool(true, false)                 ).toBe(true)
    expect( cast.bool(null, true)                  ).toBe(true)
    expect( cast.bool([0,'kek'], true)             ).toBe(true)
    expect( cast.bool({a: 'b'}, true)              ).toBe(true)
    expect( cast.bool({}, true)                    ).toBe(true)
    expect( cast.bool(undefined, true)             ).toBe(true)
    expect( cast.bool(NaN, true)                   ).toBe(true)
    expect( cast.bool(123.45, true)                ).toBe(true)
    expect( cast.bool(new Promise(() => {}), true) ).toBe(true)
    expect( cast.bool(new Date(), true)            ).toBe(true)
    expect( cast.bool(() => {}, true)              ).toBe(true)
})